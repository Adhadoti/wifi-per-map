{"ast":null,"code":"import _classCallCheck from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nvar KEY_EVENTS = INPUT_EVENT_TYPES.KEY_EVENTS;\nvar DOWN_EVENT_TYPE = 'keydown';\nvar UP_EVENT_TYPE = 'keyup';\n\nvar KeyInput = /*#__PURE__*/function (_Input) {\n  _inherits(KeyInput, _Input);\n\n  function KeyInput(element, callback, options) {\n    var _this;\n\n    _classCallCheck(this, KeyInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(KeyInput).call(this, element, callback, options));\n\n    _this.handleEvent = function (event) {\n      // Ignore if focused on text input\n      var targetElement = event.target || event.srcElement;\n\n      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n        return;\n      }\n\n      if (_this.enableDownEvent && event.type === 'keydown') {\n        _this.callback({\n          type: DOWN_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n\n      if (_this.enableUpEvent && event.type === 'keyup') {\n        _this.callback({\n          type: UP_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n    };\n\n    _this.enableDownEvent = _this.options.enable;\n    _this.enableUpEvent = _this.options.enable;\n    _this.events = (_this.options.events || []).concat(KEY_EVENTS);\n    element.tabIndex = _this.options.tabIndex || 0;\n    element.style.outline = 'none';\n\n    _this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent);\n    });\n\n    return _this;\n  }\n\n  _createClass(KeyInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === DOWN_EVENT_TYPE) {\n        this.enableDownEvent = enabled;\n      }\n\n      if (eventType === UP_EVENT_TYPE) {\n        this.enableUpEvent = enabled;\n      }\n    }\n  }]);\n\n  return KeyInput;\n}(Input);\n\nexport { KeyInput as default };","map":null,"metadata":{},"sourceType":"module"}