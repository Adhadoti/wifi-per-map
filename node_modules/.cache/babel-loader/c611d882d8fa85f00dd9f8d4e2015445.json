{"ast":null,"code":"import _classCallCheck from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/devon/Desktop/Spring_2023/Senior Project/map_gui-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Input from './input';\nvar EVENT_TYPE = 'contextmenu';\n\nvar ContextmenuInput = /*#__PURE__*/function (_Input) {\n  _inherits(ContextmenuInput, _Input);\n\n  function ContextmenuInput(element, callback, options) {\n    var _this;\n\n    _classCallCheck(this, ContextmenuInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextmenuInput).call(this, element, callback, options));\n\n    _this.handleEvent = function (event) {\n      if (!_this.options.enable) {\n        return;\n      }\n\n      _this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    };\n\n    element.addEventListener('contextmenu', _this.handleEvent);\n    return _this;\n  }\n\n  _createClass(ContextmenuInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.element.removeEventListener('contextmenu', this.handleEvent);\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === EVENT_TYPE) {\n        this.options.enable = enabled;\n      }\n    }\n  }]);\n\n  return ContextmenuInput;\n}(Input);\n\nexport { ContextmenuInput as default };","map":null,"metadata":{},"sourceType":"module"}