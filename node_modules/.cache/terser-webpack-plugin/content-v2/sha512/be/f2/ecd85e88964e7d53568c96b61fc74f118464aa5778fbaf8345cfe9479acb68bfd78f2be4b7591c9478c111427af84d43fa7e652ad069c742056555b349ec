{"map":"{\"version\":3,\"sources\":[\"/Users/devon/Desktop/map_gui-main/src/App.js\",\"/Users/devon/Desktop/map_gui-main/src/serviceWorker.js\",\"/Users/devon/Desktop/map_gui-main/src/index.js\"],\"names\":[\"App\",\"_useState\",\"useState\",\"latitude\",\"longitude\",\"width\",\"height\",\"zoom\",\"_useState2\",\"Object\",\"slicedToArray\",\"viewport\",\"setViewport\",\"_useState3\",\"_useState4\",\"selectedPoint\",\"setselectedPoint\",\"react_default\",\"a\",\"createElement\",\"style\",\"display\",\"paddingLeft\",\"windows\",\"title\",\"isMaximized\",\"background\",\"esm\",\"assign\",\"mapboxApiAccessToken\",\"mapStyle\",\"onViewportChange\",\"pointData\",\"map\",\"datapoint\",\"key\",\"properties\",\"POINT_ID\",\"geometry\",\"coordinates\",\"class\",\"onClick\",\"e\",\"preventDefault\",\"src\",\"alt\",\"onClose\",\"name\",\"DOWNLOAD\",\"UPLOAD\",\"PING\",\"isLocalhost\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"registerValidSW\",\"swUrl\",\"config\",\"navigator\",\"serviceWorker\",\"register\",\"then\",\"registration\",\"onupdatefound\",\"installingWorker\",\"installing\",\"onstatechange\",\"state\",\"controller\",\"console\",\"log\",\"onUpdate\",\"onSuccess\",\"catch\",\"error\",\"ReactDOM\",\"render\",\"document\",\"getElementById\",\"URL\",\"process\",\"href\",\"origin\",\"addEventListener\",\"concat\",\"fetch\",\"response\",\"contentType\",\"headers\",\"get\",\"status\",\"indexOf\",\"ready\",\"unregister\",\"reload\",\"checkValidServiceWorker\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from \\\"react\\\";\\nimport ReactMapGL, { Marker, Popup } from \\\"react-map-gl\\\";\\nimport { TitleBar } from 'react-desktop/windows';\\nimport * as pointData from \\\"./data/sample_data.json\\\";\\n\\nexport default function App() {\\n  const [viewport, setViewport] = useState({\\n    latitude: 28.064570,\\n    longitude: -80.623040,\\n    width: \\\"100vw\\\",\\n    height: \\\"100vh\\\",\\n    zoom: 16\\n  });\\n  const [selectedPoint, setselectedPoint] = useState(null);\\n  \\n  return (\\n    <div>\\n      <div style={{\\n      display: \\\"block\\\", width:1500, paddingLeft:0\\n      }}>\\n      <h4>TESTING OVERLAY</h4>\\n      <TitleBar\\n      title= \\\"Testing Overlay\\\"\\n      isMaximized=\\\"false\\\"\\n      background=\\\"orange\\\"\\n    />\\n    </div>\\n      <ReactMapGL\\n        {...viewport}\\n        mapboxApiAccessToken={\\\"pk.eyJ1IjoiZHJlc2VuZGVzIiwiYSI6ImNsYWczYnVxdDA5aXEzd21vdmlzY3lmemUifQ.szVCqwXEpk5-FpJFutAFCg\\\"}\\n        mapStyle=\\\"mapbox://styles/mapbox/streets-v11\\\"\\n        onViewportChange={viewport=> {\\n          setViewport(viewport)}}\\n      >\\n\\n        {pointData.features.map(datapoint => (\\n          <Marker \\n            key={datapoint.properties.POINT_ID}\\n            latitude ={datapoint.geometry.coordinates[0]}\\n            longitude ={datapoint.geometry.coordinates[1]}\\n          >\\n            <button class = \\\"marker-btn\\\" onClick={(e) =>{\\n              e.preventDefault();\\n              setselectedPoint(datapoint);\\n            }}>\\n              <img src=\\\"/upload.svg\\\" alt = \\\"Upload Icon\\\"/>\\n            </button>\\n          </Marker>\\n        ))}\\n        {selectedPoint ? (\\n          <Popup \\n            latitude={selectedPoint.geometry.coordinates[0]} \\n            longitude={selectedPoint.geometry.coordinates[1]}\\n            onClose={() => {\\n              setselectedPoint(null);\\n\\n            }}\\n          >\\n            <div>\\n              <h2>{selectedPoint.properties.name}</h2>\\n              <p>{\\\"DOWNLOAD: \\\"}{selectedPoint.properties.DOWNLOAD}</p>\\n              <p>{\\\"UPLOAD: \\\"}{selectedPoint.properties.UPLOAD}</p>\\n              <p>{\\\"PING: \\\"}{selectedPoint.properties.PING}</p>\\n\\n            </div>\\n          </Popup>\\n\\n        ): null}\\n      </ReactMapGL>\\n    </div>\\n  );\\n}\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.register();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{147:function(e,t,n){\"use strict\";n.r(t);var o=n(2),a=n.n(o),i=n(22),r=n.n(i),c=(n(65),n(23)),l=n(30),s=n(58),u=n(59);function p(){var e=Object(o.useState)({latitude:28.06457,longitude:-80.62304,width:\"100vw\",height:\"100vh\",zoom:16}),t=Object(c.a)(e,2),n=t[0],i=t[1],r=Object(o.useState)(null),p=Object(c.a)(r,2),d=p[0],m=p[1];return a.a.createElement(\"div\",null,a.a.createElement(\"div\",{style:{display:\"block\",width:1500,paddingLeft:0}},a.a.createElement(\"h4\",null,\"TESTING OVERLAY\"),a.a.createElement(s.TitleBar,{title:\"Testing Overlay\",isMaximized:\"false\",background:\"orange\"})),a.a.createElement(l.c,Object.assign({},n,{mapboxApiAccessToken:\"pk.eyJ1IjoiZHJlc2VuZGVzIiwiYSI6ImNsYWczYnVxdDA5aXEzd21vdmlzY3lmemUifQ.szVCqwXEpk5-FpJFutAFCg\",mapStyle:\"mapbox://styles/mapbox/streets-v11\",onViewportChange:function(e){i(e)}}),u.a.map(function(e){return a.a.createElement(l.a,{key:e.properties.POINT_ID,latitude:e.geometry.coordinates[0],longitude:e.geometry.coordinates[1]},a.a.createElement(\"button\",{class:\"marker-btn\",onClick:function(t){t.preventDefault(),m(e)}},a.a.createElement(\"img\",{src:\"/upload.svg\",alt:\"Upload Icon\"})))}),d?a.a.createElement(l.b,{latitude:d.geometry.coordinates[0],longitude:d.geometry.coordinates[1],onClose:function(){m(null)}},a.a.createElement(\"div\",null,a.a.createElement(\"h2\",null,d.properties.name),a.a.createElement(\"p\",null,\"DOWNLOAD: \",d.properties.DOWNLOAD),a.a.createElement(\"p\",null,\"UPLOAD: \",d.properties.UPLOAD),a.a.createElement(\"p\",null,\"PING: \",d.properties.PING))):null))}var d=Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function m(e,t){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var n=e.installing;null!=n&&(n.onstatechange=function(){\"installed\"===n.state&&(navigator.serviceWorker.controller?(console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\"),t&&t.onUpdate&&t.onUpdate(e)):(console.log(\"Content is cached for offline use.\"),t&&t.onSuccess&&t.onSuccess(e)))})}}).catch(function(e){console.error(\"Error during service worker registration:\",e)})}r.a.render(a.a.createElement(p,null),document.getElementById(\"root\")),function(e){if(\"serviceWorker\"in navigator){if(new URL(\"\",window.location.href).origin!==window.location.origin)return;window.addEventListener(\"load\",function(){var t=\"\".concat(\"\",\"/service-worker.js\");d?(function(e,t){fetch(e).then(function(n){var o=n.headers.get(\"content-type\");404===n.status||null!=o&&-1===o.indexOf(\"javascript\")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):m(e,t)}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\")})}(t,e),navigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\")})):m(t,e)})}}()},59:function(e){e.exports={a:[{type:\"Feature\",properties:{name:\"point 1\",POINT_ID:100,UPLOAD:\"50 mbps\",DOWNLOAD:\"50 mbps\",PING:\"10ms\"},geometry:{type:\"Point\",coordinates:[28.0644158382745,-80.62386672007591]}},{type:\"Feature\",properties:{name:\"point 2\",POINT_ID:101,UPLOAD:\"20 mbps\",DOWNLOAD:\"30 mbps\",PING:\"40ms\"},geometry:{type:\"Point\",coordinates:[28.064569,-80.624619]}}]}},60:function(e,t,n){e.exports=n(147)},65:function(e,t,n){}},[[60,1,2]]]);","extractedComments":[]}