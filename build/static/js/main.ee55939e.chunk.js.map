{"version":3,"sources":["checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","_ref","label","checked","props","Object","objectWithoutProperties","defaultChecked","_useState","useState","_useState2","slicedToArray","isChecked","setIsChecked","react_default","a","createElement","className","aria-hidden","viewBox","fill","assign","type","onChange","prev","App","latitude","longitude","width","height","zoom","viewport","setViewport","_useState3","_useState4","selectedPoint","setselectedPoint","style","display","paddingLeft","esm","mapboxApiAccessToken","mapStyle","onViewportChange","src_checkbox","pointData","map","datapoint","key","properties","POINT_ID","geometry","coordinates","class","onClick","e","preventDefault","src","alt","onClose","name","DOWNLOAD","UPLOAD","PING","position","top","right","margin","positionOptions","enableHighAccuracy","trackUserLocation","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee55939e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Checkbox = ({ label, checked, ...props }) => {\n  const defaultChecked = checked ? checked : false;\n  const [isChecked, setIsChecked] = useState(defaultChecked);\n\n  \n  return (\n    <div className=\"checkbox-wrapper\"\n    aria-hidden=\"true\"\n    viewBox=\"0 0 15 11\"\n    fill=\"none\">\n      \n      <label>\n        <input type=\"checkbox\" checked={isChecked}\n        onChange={() => setIsChecked((prev) => !prev)} \n        {...props}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n};\nexport default Checkbox;\n","import React, { useState } from \"react\";\nimport ReactMapGL, { Marker, Popup, GeolocateControl } from \"react-map-gl\";\nimport * as pointData from \"./data/sample_data.json\";\n\nimport Checkbox from \"./checkbox.js\";\n\nexport default function App() {\n  const [viewport, setViewport] = useState({\n    latitude: 28.064570,\n    longitude: -80.623040,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 16\n  });\n\n  const [selectedPoint, setselectedPoint] = useState(null);\n\n\n  const geolocateStyle = {\n  position: \"absolute\",\n  top: 0,\n  right: 0,\n  margin: 10\n  };\n\n  \n  return (\n    <div>\n      <div style={{\n      display: \"block\", width:1500, paddingLeft:10\n      }}>\n      <h3>Current metrics</h3>\n      <h5>Upload: </h5>\n      <h5>Download: </h5>\n      <h5>Ping: </h5>\n      \n\n      </div>\n\n      <ReactMapGL\n      \n        {...viewport}\n        mapboxApiAccessToken={\"pk.eyJ1IjoiZHJlc2VuZGVzIiwiYSI6ImNsYWczYnVxdDA5aXEzd21vdmlzY3lmemUifQ.szVCqwXEpk5-FpJFutAFCg\"}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={viewport=> {\n          setViewport(viewport)}}\n      >\n        <div>\n        <Checkbox label=\"upload\" checked={true}/>\n        <Checkbox label=\"download\" checked={true}/>\n        <Checkbox label=\"ping\" checked={true}/>\n        </div>\n      \n        {pointData.features.map(datapoint => (\n          <Marker \n            key={datapoint.properties.POINT_ID}\n            latitude ={datapoint.geometry.coordinates[0]}\n            longitude ={datapoint.geometry.coordinates[1]}\n          >\n            <button class = \"marker-btn\" onClick={(e) =>{\n              e.preventDefault();\n              setselectedPoint(datapoint);\n            }}>\n              <img src=\"/upload_good.svg\" alt = \"Upload Icon\"/>\n              <img src=\"/download_okay.svg\" alt = \"download Icon\"/>\n              <img src=\"/ping_bad.svg\" alt = \"ping Icon\"/>\n\n            </button>\n          </Marker>\n        ))}\n        \n        {selectedPoint ? (\n          <Popup \n            latitude={selectedPoint.geometry.coordinates[0]} \n            longitude={selectedPoint.geometry.coordinates[1]}\n            onClose={() => {\n              setselectedPoint(null);\n            }}\n          >\n            <div>\n              <h2>{selectedPoint.properties.name}</h2>\n              <p>{\"DOWNLOAD: \"}{selectedPoint.properties.DOWNLOAD}</p>\n              <p>{\"UPLOAD: \"}{selectedPoint.properties.UPLOAD}</p>\n              <p>{\"PING: \"}{selectedPoint.properties.PING}</p>\n\n            </div>\n          </Popup>\n\n        ): null}\n\n\n        <GeolocateControl\n          style={geolocateStyle}\n          positionOptions={{ enableHighAccuracy: true }}\n          trackUserLocation={true}\n        />\n      \n      </ReactMapGL>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}